#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.GithubAPI

def type = "nodejs"
def product = "civil"
def component = "citizen-ui"
def camundaBranch = "master"
def dmnBranch = "master"
def waStandaloneBranch = "master"
def ccdBranch = "master"
def generalappCCDBranch = "master"
AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET'),
    secret('microservicekey-xui-webapp', 'XUI_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD'),
    secret('citizen-ui-test-username', 'CITIZEN_USERNAME'),
    secret('citizen-ui-test-password', 'CITIZEN_PASSWORD'),
    secret('civil-judge-password', 'JUDGE_PASSWORD'),
    secret('system-update-user-password', 'SYSTEM_USER_PASSWORD')
  ],
  'civil-cui-${env}': [
    secret('playwright-service-url', 'PLAYWRIGHT_SERVICE_URL'),
    secret('playwright-token', 'PLAYWRIGHT_SERVICE_ACCESS_TOKEN'),
  ],
  'aac-${env}': [
    secret('idam-mca-client-secret', 'IDAM_MCA_CLIENT_SECRET'),
    secret('idam-mca-system-user-username', 'IDAM_CAA_USERNAME'),
    secret('idam-mca-system-user-password', 'IDAM_CAA_PASSWORD'),
    secret('idam-noc-approver-username', 'IDAM_NOC_APPROVER_USERNAME'),
    secret('idam-noc-approver-password', 'IDAM_NOC_APPROVER_PASSWORD'),
    secret('aac-manage-case-s2s-secret', 'MANAGE_CASE_S2S_KEY'),
    secret('notify-mca-api-key-secret', 'NOTIFY_MCA_API_KEY')
  ]
]

def setUrls(suffix){
  env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
  env.IDAM_WEB_URL = "https://idam-web-public.aat.platform.hmcts.net"
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  if("${suffix}" == 'aat') {
    env.CCD_DATA_STORE_URL = "https://civil-cui-data-store-staging.aat.platform.hmcts.net"
    env.URL="https://civil-cui-xui-staging.aat.platform.hmcts.net"
    env.TEST_URL="https://civil-citizen-ui-staging.aat.platform.hmcts.net"
    env.CIVIL_SERVICE_URL="https://civil-cui-civil-service-staging.aat.platform.hmcts.net"
    env.CIVIL_GENERAL_APPLICATIONS_URL="https://civil-cui-general-applications.aat.platform.hmcts.net"
    env.AAC_API_URL="https://civil-cui-manage-case-assignment-staging.aat.platform.hmcts.net"
  } else {
    env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-civil-citizen-ui-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.URL="https://xui-civil-citizen-ui-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.TEST_URL="https://civil-citizen-ui-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.CIVIL_SERVICE_URL="https://civil-citizen-ui-pr-${CHANGE_ID}-civil-service.preview.platform.hmcts.net"
    env.CIVIL_GENERAL_APPLICATIONS_URL="https://civil-citizen-ui-pr-${CHANGE_ID}-general-applications.preview.platform.hmcts.net"
    env.AAC_API_URL="https://manage-case-assignment-civil-citizen-ui-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  }
  env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def branchesToSync = ['demo', 'perftest', 'ithc']

def checkForFullDeployLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "fullDeploy").contains("fullDeploy")
}

def checkForEnableEmailNotifications(branch_name) {
    return new GithubAPI(this).getLabelsbyPattern(branch_name, "pr-values:enableNotifyEmails").contains("pr-values:enableNotifyEmails")
}

withPipeline(type, product, component) {
  pipelineConf = config
  disableLegacyDeployment()
  enableAksStagingDeployment()
  enableSlackNotifications('#civil_notifications')
  enableSlackNotifications('#citizen-ui-techteam')
  syncBranchesWithMaster(branchesToSync)

  onPR {
    env.ENVIRONMENT = "preview"
    env.NODE_OPTIONS= "--max-old-space-size=8192"
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    loadVaultSecrets(secrets)
  }
  onMaster {
    env.ENVIRONMENT="aat"
    env.NODE_OPTIONS= "--max-old-space-size=8192"
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    loadVaultSecrets(secrets)
  }
  onDemo {
    env.ENVIRONMENT = "demo"
    loadVaultSecrets(secrets)
  }

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }

  before('smoketest:preview') {
    sh """
          eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
          ./bin/add-roles.sh
          ./bin/pull-latest-camunda-files.sh ${camundaBranch}
          ./bin/pull-latest-dmn-files.sh ${dmnBranch}
          ./bin/pull-latest-camunda-wa-files.sh ${waStandaloneBranch}
          ./bin/import-ccd-definition.sh "-e *-nonprod.json,*COS-nonprod.json,AuthorisationCaseType-shuttered.json" ${ccdBranch}
          ./bin/import-ga-ccd-definition.sh "-e *-prod.json" ${generalappCCDBranch}
        """
    setUrls("civil-citizen-ui-pr-${CHANGE_ID}")
  }


  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
    if (checkForEnableEmailNotifications(env.BRANCH_NAME)) {
      error "The 'pr-values:enableNotifyEmails' label is active on the PR. The build will be interrupted to avoid wasting build time needlessly."
    }
  }


  before('functionalTest:preview') {
    env.IDAM_STUB_ENABLED='false'
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'src/test/functionalTests/test-results/functional/**/*'
  }

  afterSuccess('smoketest:preview') {
    stage('Accessibility') {
      yarnBuilder.yarn('tests:a11y')
      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/accessibility-report",
        reportFiles          : 'a11y.html',
        reportName           : 'Preview Accessibility results'
      ])
    }
  }

  before('smoketest:aat') {
    sh """
      eval \$(./bin/variables/load-staging-environment-variables.sh)
      ./bin/add-roles.sh
      ./bin/pull-latest-camunda-files.sh ${camundaBranch}
      ./bin/pull-latest-dmn-files.sh ${dmnBranch}
      ./bin/pull-latest-camunda-wa-files.sh ${waStandaloneBranch}
      ./bin/import-ccd-definition.sh "-e *-nonprod.json,*COS-nonprod.json,AuthorisationCaseType-shuttered.json" ${ccdBranch}
      ./bin/import-ga-ccd-definition.sh "-e *-prod.json" ${generalappCCDBranch}
    """
    setUrls("aat");
  }

  afterSuccess('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'

    stage('Accessibility') {
      yarnBuilder.yarn('tests:a11y')
      publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/accessibility-report",
            reportFiles          : 'a11y.html',
            reportName           : 'AAT Accessibility results'
      ])
    }
  }

  afterAlways('smoketest:aat') {
//    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }


  before('functionalTest:aat') {
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'src/test/functionalTests/test-results/functional/**/*'
  }

  afterSuccess('functionalTest:aat') {
    //createGithubRelease()
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  before('akschartsinstall') {
    onPR() {
      if (!checkForFullDeployLabel(env.BRANCH_NAME)) {
        error("Build failed because there is no label full deploy.")
      }
    }
  }
}
