#!groovy

@Library("Infrastructure")

def type = "nodejs"
def product = "civil"
def component = "citizen-ui"

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD')
  ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withPipeline(type, product, component) {
  pipelineConf = config
  //enableAksStagingDeployment()
  //disableLegacyDeployment()

  onPR {
      loadVaultSecrets(secrets)
              stage('Approval') {
                  // no agent, so executors are not used up when waiting for approvals
                  agent none
                  steps {
                      script {
                          def deploymentDelay = input id: 'Deploy', message: 'Deploy to AKS?', submitter: 'rkivisto,admin', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                          sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
                      def deployment = input message: 'Deploy to Production', ok: 'Continue',
                                                      parameters: [choice(name: 'APPROVE_PROD', choices: 'YES\nNO', description: 'Deploy from STAGING to PRODUCTION?')]
                                                  if (deployment == 'YES'){
                                                        enableAksStagingDeployment()
                                                  }
                      }
                  }
              }
  }
  onMaster {
    loadVaultSecrets(secrets)
  }
  onDemo {
    loadVaultSecrets(secrets)
  }
  after('build') {
    yarnBuilder.yarn('build')
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

}
