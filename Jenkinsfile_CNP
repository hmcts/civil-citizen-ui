#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.GithubAPI

def type = "nodejs"
def product = "civil"
def ccddefbranch = "feat/CIV-1916_extend_deadline"
def camundaBranch = "feat/CIV-1916_extend_response_deadline"
def component = "citizen-ui"
AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD'),
    secret('ordnance-survey-api-key', 'ORDNANCE_SURVEY_API_KEY'),
    secret('citizen-ui-test-username', 'CITIZEN_USERNAME'),
    secret('citizen-ui-test-password', 'CITIZEN_PASSWORD')
  ]
]

def setUrls(suffix){
  env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  if("${suffix}" == 'aat') {
    env.CCD_DATA_STORE_URL = "http://ccd-data-store-api-${suffix}.service.core-compute-aat.internal"
    env.URL="https://manage-case.aat.platform.hmcts.net"
    env.TEST_URL="https://civil-citizen-ui-staging.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="http://civil-service-${suffix}.service.core-compute-aat.internal"

  } else {
    env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-${suffix}.service.core-compute-preview.internal"
    env.URL="https://xui-${suffix}.service.core-compute-preview.internal"
    env.TEST_URL="https://${suffix}.service.core-compute-preview.internal"
    env.CIVIL_SERVICE_URL="https://civil-service-${suffix}.service.core-compute-preview.internal"

  }
  env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def branchesToSync = ['demo', 'perftest']

def checkForFullDeployLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "fullDeploy").contains("fullDeploy")
}

def checkForEnableHelmLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "enableHelm").contains("enableHelm")
}

withPipeline(type, product, component) {
  pipelineConf = config
  disableLegacyDeployment()
  enableAksStagingDeployment()
  enableSlackNotifications('#civil_notifications')
  syncBranchesWithMaster(branchesToSync)

  onPR {
    env.ENVIRONMENT = "preview"
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    loadVaultSecrets(secrets)
    if (!checkForEnableHelmLabel(env.BRANCH_NAME)) {
      enableCleanupOfHelmReleaseAlways();
    }
  }
  onMaster {
    env.ENVIRONMENT="aat"
    loadVaultSecrets(secrets)
  }
  onDemo {
    env.ENVIRONMENT = "demo"
    loadVaultSecrets(secrets)
  }

  before('smoketest:preview') {
    sh """
          eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
          ./bin/add-roles.sh
          ./bin/pull-latest-release-asset.sh civil-ccd-definition civil-ccd-definition.zip
          ./bin/pull-latest-camunda-files.sh ${camundaBranch}
          ./bin/import-ccd-definition.sh "-e *-prod.json,*HNL-nonprod.json,*ClaimantResponseLRspec-nonprod.json,*DocmosisEvents-nonprod.json,*UserEventsLRspec-nonprod.json" ${ccddefbranch}
          ./bin/import-bpmn-diagram.sh .
        """
    setUrls("civil-citizen-ui-pr-${CHANGE_ID}")
  }

  afterSuccess('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

  afterSuccess('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  before('smoketest:aat') {
    sh """
      eval \$(./bin/variables/load-staging-environment-variables.sh)
      ./bin/add-roles.sh
      ./bin/pull-latest-release-asset.sh civil-ccd-definition civil-ccd-definition.zip
      ./bin/pull-latest-release-asset.sh civil-camunda-bpmn-definition civil-camunda-bpmn-definition.zip
      ./bin/import-ccd-definition.sh "-e *GAspec.json,*DJspec.json,*-nonprod.json,*DJ.json,*DJ-SDO-nonprod.json,*DJ-nonprod.json"
      ./bin/import-bpmn-diagram.sh .
    """
    setUrls("aat");
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }


  before('functionalTest:aat') {
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  afterSuccess('functionalTest:aat') {
    //createGithubRelease()
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  before('akschartsinstall') {
    onPR() {
      if (!checkForFullDeployLabel(env.BRANCH_NAME)) {
        error("Build failed because there is no label full deploy.")
      }
    }
  }
}
