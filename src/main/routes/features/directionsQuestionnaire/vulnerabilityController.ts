import * as express from 'express';
import {SUPPORT_REQUIRED_URL, VULNERABILITY_URL} from '../../urls';
import {
  getVulnerability,
  getVulnerabilityForm,
  saveVulnerability,
} from '../../../services/features/directionsQuestionnaire/vulnerabilityService';
import {GenericForm} from '../../../common/form/models/genericForm';
import {Vulnerability} from '../../../common/models/directionsQuestionnaire/vulnerability';
import {constructResponseUrlWithIdParams} from '../../../common/utils/urlFormatter';

const vulnerabilityController = express.Router();
const vulnerabilityViewPath = 'features/directionsQuestionnaire/vulnerability';

function renderView (form: GenericForm<Vulnerability>, res: express.Response): void {
  const vulnerability = Object.assign(form);
  vulnerability.option = form.model.isVulnerable;

  res.render(vulnerabilityViewPath, {form});
}

vulnerabilityController.get(VULNERABILITY_URL, async (req, res) => {
  try {
    renderView(new GenericForm(await getVulnerability(req.params.id)), res);
  } catch (error) {
    res.status(500).send({error: error.message});
  }
});

vulnerabilityController.post(VULNERABILITY_URL, async (req, res) => {
  try {
    const claimId = req.params.id;
    const vulnerabilityForm = getVulnerabilityForm(req.body.isVulnerable, req.body.vulnerabilityDetails);
    const form = new GenericForm(vulnerabilityForm);
    form.validateSync();

    if (form.hasErrors()) {
      renderView(form, res);
    } else {
      await saveVulnerability(claimId, vulnerabilityForm);
      res.redirect(constructResponseUrlWithIdParams(claimId, SUPPORT_REQUIRED_URL));
    }
  } catch (error) {
    res.status(500).send({error: error.message});
  }
});

export default vulnerabilityController;
