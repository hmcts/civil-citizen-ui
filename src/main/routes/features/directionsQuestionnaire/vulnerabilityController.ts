import * as express from 'express';
import {SUPPORT_REQUIRED_URL, VULNERABILITY_URL} from '../../urls';
import {GenericForm} from '../../../common/form/models/genericForm';
import {Vulnerability} from '../../../common/models/directionsQuestionnaire/vulnerabilityQuestions/vulnerability';
import {constructResponseUrlWithIdParams} from '../../../common/utils/urlFormatter';
import {
  getDirectionQuestionnaire,
  saveDirectionQuestionnaire,
} from '../../../services/features/directionsQuestionnaire/directionQuestionnaireService';
import {YesNo} from '../../../common/form/models/yesNo';

const vulnerabilityController = express.Router();
const vulnerabilityViewPath = 'features/directionsQuestionnaire/vulnerability';
const dqPropertyName = 'vulnerability';
const dqParentName = 'vulnerabilityQuestions';

function renderView(form: GenericForm<Vulnerability>, res: express.Response): void {
  res.render(vulnerabilityViewPath, {form});
}

vulnerabilityController.get(VULNERABILITY_URL, async (req, res, next: express.NextFunction) => {
  try {
    const directionQuestionnaire = await getDirectionQuestionnaire(req.params.id);
    const vulnerability = directionQuestionnaire.vulnerabilityQuestions?.vulnerability ?
      directionQuestionnaire.vulnerabilityQuestions.vulnerability : new Vulnerability();

    renderView(new GenericForm(vulnerability), res);
  } catch (error) {
    next(error);
  }
});

vulnerabilityController.post(VULNERABILITY_URL, async (req, res, next: express.NextFunction) => {
  try {
    const claimId = req.params.id;
    const vulnerabilityDetails = req.body.option === YesNo.YES ? req.body.vulnerabilityDetails : undefined;
    const vulnerability = new GenericForm(new Vulnerability(req.body.option, vulnerabilityDetails));
    vulnerability.validateSync();

    if (vulnerability.hasErrors()) {
      renderView(vulnerability, res);
    } else {
      await saveDirectionQuestionnaire(claimId, vulnerability.model, dqPropertyName, dqParentName);
      res.redirect(constructResponseUrlWithIdParams(claimId, SUPPORT_REQUIRED_URL));
    }
  } catch (error) {
    next(error);
  }
});

export default vulnerabilityController;
