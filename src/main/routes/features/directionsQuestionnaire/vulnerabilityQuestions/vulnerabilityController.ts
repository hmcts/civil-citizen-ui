import {NextFunction, RequestHandler, Response, Router} from 'express';
import {SUPPORT_REQUIRED_URL, VULNERABILITY_URL} from 'routes/urls';
import {GenericForm} from 'form/models/genericForm';
import {Vulnerability} from 'models/directionsQuestionnaire/vulnerabilityQuestions/vulnerability';
import {constructResponseUrlWithIdParams} from 'common/utils/urlFormatter';
import {
  getDirectionQuestionnaire,
  saveDirectionQuestionnaire,
} from 'services/features/directionsQuestionnaire/directionQuestionnaireService';
import {YesNo} from 'form/models/yesNo';
import {generateRedisKey} from 'modules/draft-store/draftStoreService';
import {AppRequest} from 'common/models/AppRequest';

const vulnerabilityController = Router();
const vulnerabilityViewPath = 'features/directionsQuestionnaire/vulnerabilityQuestions/vulnerability';
const dqPropertyName = 'vulnerability';
const dqParentName = 'vulnerabilityQuestions';

const {Logger} = require('@hmcts/nodejs-logging');
const logger = Logger.getLogger('vulnerabilityController');

function renderView(form: GenericForm<Vulnerability>, res: Response): void {
  res.render(vulnerabilityViewPath, {form, pageTitle: 'PAGES.VULNERABILITY.PAGE_TITLE'});
}

vulnerabilityController.get(VULNERABILITY_URL, (async (req, res, next: NextFunction) => {
  try {
    const directionQuestionnaire = await getDirectionQuestionnaire(generateRedisKey(<AppRequest>req));
    const vulnerability = directionQuestionnaire.vulnerabilityQuestions?.vulnerability ?
      directionQuestionnaire.vulnerabilityQuestions.vulnerability : new Vulnerability();

    renderView(new GenericForm(vulnerability), res);
  } catch (error) {
    logger.error(`Error when GET : vulnerability - ${error.message}`);
    next(error);
  }
}) as RequestHandler);

vulnerabilityController.post(VULNERABILITY_URL, (async (req, res, next: NextFunction) => {
  try {
    const claimId = req.params.id;
    const vulnerabilityDetails = req.body.option === YesNo.YES ? req.body.vulnerabilityDetails : undefined;
    const vulnerability = new GenericForm(new Vulnerability(req.body.option, vulnerabilityDetails));
    vulnerability.validateSync();

    if (vulnerability.hasErrors()) {
      logger.info('Vulnerability has errors');
      renderView(vulnerability, res);
    } else {
      await saveDirectionQuestionnaire(generateRedisKey(<AppRequest>req), vulnerability.model, dqPropertyName, dqParentName);
      res.redirect(constructResponseUrlWithIdParams(claimId, SUPPORT_REQUIRED_URL));
    }
  } catch (error) {
    logger.error(`Error when POST : vulnerability - ${error.message}`);
    next(error);
  }
}) as RequestHandler);

export default vulnerabilityController;
