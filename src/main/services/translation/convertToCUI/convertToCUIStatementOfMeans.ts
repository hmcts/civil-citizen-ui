import {StatementOfMeans} from 'models/statementOfMeans';
import {toCUIBankAccount} from 'services/translation/convertToCUI/convertToCUIBankAccount';
import {toCUIHomeDetails} from 'services/translation/convertToCUI/convertToCUIHomeDetails';
import {toCUIEmployment} from 'services/translation/convertToCUI/convertToCUIEmployment';
import {toCUIEmploymentDetails} from 'services/translation/convertToCUI/convertToCUIEmployerDetails';
import {toCUISelfEmploymentDetails} from 'services/translation/convertToCUI/convertToCUISelfEmploymentDetails';
import {toCUISelfEmploymentTaxPayment} from 'services/translation/convertToCUI/convertToCUISelfEmploymentTaxPayment';
import {toCUIUnemploymentDetails} from 'services/translation/convertToCUI/convertToCUIUnemploymentDetails';
import {toCUICourtOrders} from 'services/translation/convertToCUI/convertToCUICourtOrders';
import {toCUIDebts} from 'services/translation/convertToCUI/convertToCUIDebts';
import {Explanation} from 'form/models/statementOfMeans/explanation';
import {toCUICarerAllowanceCredit} from 'services/translation/convertToCUI/convertToCUICareerAllowance';
import {toCUIPriorityDebts} from 'services/translation/convertToCUI/convertToCUIPriorityDebts';
import {toCUIRecurringIncome} from 'services/translation/convertToCUI/convertToCUIRecurringIncome';
import {toCUIRecurringExpense} from 'services/translation/convertToCUI/convertToCUIRecurringExpense';
import {toCUIDependents} from 'services/translation/convertToCUI/convertToCUIDependents';
import {toCUIOtherDependents} from 'services/translation/convertToCUI/convertToCUIOtherDependents';
import {CCDClaim} from 'models/civilClaimResponse';
import {toCUIGenericYesNo} from 'services/translation/convertToCUI/convertToCUIYesNo';

export const toCUIStatementOfMeans = (ccdResponse: CCDClaim): StatementOfMeans => {
  if (!ccdResponse) return undefined;
  const statementOfMeans: StatementOfMeans = new StatementOfMeans();
  statementOfMeans.bankAccounts = toCUIBankAccount(ccdResponse?.respondent1BankAccountList);
  statementOfMeans.disability = toCUIGenericYesNo(ccdResponse?.disabilityPremiumPayments);
  statementOfMeans.severeDisability = toCUIGenericYesNo(ccdResponse?.severeDisabilityPremiumPayments);
  statementOfMeans.residence = toCUIHomeDetails(ccdResponse?.respondent1DQHomeDetails);
  statementOfMeans.cohabiting = toCUIGenericYesNo(ccdResponse?.respondent1PartnerAndDependent?.liveWithPartnerRequired);
  statementOfMeans.partnerAge = toCUIGenericYesNo(ccdResponse?.respondent1PartnerAndDependent?.partnerAgedOver);
  statementOfMeans.partnerPension = toCUIGenericYesNo(ccdResponse?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.partnerPensionLiP);
  statementOfMeans.partnerDisability = toCUIGenericYesNo(ccdResponse?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.partnerDisabilityLiP);
  statementOfMeans.partnerSevereDisability = toCUIGenericYesNo(ccdResponse?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.partnerSevereDisabilityLiP);
  statementOfMeans.dependants = toCUIDependents(ccdResponse?.respondent1PartnerAndDependent);
  statementOfMeans.childrenDisability = toCUIGenericYesNo(ccdResponse?.respondent1PartnerAndDependent?.receiveDisabilityPayments);
  statementOfMeans.numberOfChildrenLivingWithYou = Number(ccdResponse?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.childrenEducationLiP);
  statementOfMeans.otherDependants = toCUIOtherDependents(ccdResponse?.respondent1PartnerAndDependent);
  statementOfMeans.employment = toCUIEmployment(ccdResponse?.defenceAdmitPartEmploymentTypeRequired, ccdResponse?.respondToClaimAdmitPartEmploymentTypeLRspec);
  statementOfMeans.employers = toCUIEmploymentDetails(ccdResponse?.responseClaimAdmitPartEmployer);
  statementOfMeans.selfEmployedAs = toCUISelfEmploymentDetails(ccdResponse?.specDefendant1SelfEmploymentDetails);
  statementOfMeans.taxPayments = toCUISelfEmploymentTaxPayment(ccdResponse?.specDefendant1SelfEmploymentDetails);
  statementOfMeans.unemployment = toCUIUnemploymentDetails(ccdResponse?.respondToClaimAdmitPartUnemployedLRspec);
  statementOfMeans.courtOrders = toCUICourtOrders(ccdResponse?.respondent1CourtOrderPaymentOption, ccdResponse?.respondent1CourtOrderDetails);
  statementOfMeans.debts = toCUIDebts(ccdResponse?.respondent1LoanCreditOption, ccdResponse?.respondent1LoanCreditDetails);
  statementOfMeans.explanation = new Explanation(ccdResponse?.responseToClaimAdmitPartWhyNotPayLRspec);
  statementOfMeans.carer = toCUICarerAllowanceCredit(ccdResponse?.respondent1DQCarerAllowanceCredit, ccdResponse?.respondent1DQCarerAllowanceCreditFullAdmission);
  statementOfMeans.priorityDebts = toCUIPriorityDebts(ccdResponse?.specDefendant1Debts);
  statementOfMeans.regularIncome = toCUIRecurringIncome(ccdResponse?.respondent1DQRecurringIncome, ccdResponse?.respondent1DQRecurringIncomeFA);
  statementOfMeans.regularExpenses = toCUIRecurringExpense(ccdResponse?.respondent1DQRecurringExpenses, ccdResponse?.respondent1DQRecurringExpensesFA);
  return statementOfMeans;
};

