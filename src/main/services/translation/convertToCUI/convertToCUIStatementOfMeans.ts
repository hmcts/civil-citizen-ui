import {StatementOfMeans} from 'models/statementOfMeans';
import {toCUIBankAccount} from 'services/translation/convertToCUI/convertToCUIBankAccount';
import {toCUIHomeDetails} from 'services/translation/convertToCUI/convertToCUIHomeDetails';
import {toCUIEmployment} from 'services/translation/convertToCUI/convertToCUIEmployment';
import {toCUIEmploymentDetails} from 'services/translation/convertToCUI/convertToCUIEmployerDetails';
import {toCUISelfEmploymentDetails} from 'services/translation/convertToCUI/convertToCUISelfEmploymentDetails';
import {toCUISelfEmploymentTaxPayment} from 'services/translation/convertToCUI/convertToCUISelfEmploymentTaxPayment';
import {toCUIUnemploymentDetails} from 'services/translation/convertToCUI/convertToCUIUnemploymentDetails';
import {toCUICourtOrders} from 'services/translation/convertToCUI/convertToCUICourtOrders';
import {toCUIDebts} from 'services/translation/convertToCUI/convertToCUIDebts';
import {Explanation} from 'form/models/statementOfMeans/explanation';
import {toCUICarerAllowanceCredit} from 'services/translation/convertToCUI/convertToCUICareerAllowance';
import {toCUIPriorityDebts} from 'services/translation/convertToCUI/convertToCUIPriorityDebts';
import {toCUIRecurringIncome} from 'services/translation/convertToCUI/convertToCUIRecurringIncome';
import {toCUIRecurringExpense} from 'services/translation/convertToCUI/convertToCUIRecurringExpense';
import {toCUIDependents} from 'services/translation/convertToCUI/convertToCUIDependents';
import {toCUIOtherDependents} from 'services/translation/convertToCUI/convertToCUIOtherDependents';
import {CCDClaim} from 'models/civilClaimResponse';
import {toCUIGenericYesNo} from 'services/translation/convertToCUI/convertToCUIYesNo';

export const toCUIStatementOfMeans = (ccdClaim: CCDClaim): StatementOfMeans => {
  if (!ccdClaim) return undefined;
  const statementOfMeans: StatementOfMeans = new StatementOfMeans();
  statementOfMeans.bankAccounts = toCUIBankAccount(ccdClaim?.respondent1BankAccountList);
  statementOfMeans.disability = toCUIGenericYesNo(ccdClaim?.disabilityPremiumPayments);
  statementOfMeans.severeDisability = toCUIGenericYesNo(ccdClaim?.severeDisabilityPremiumPayments);
  statementOfMeans.residence = toCUIHomeDetails(ccdClaim?.respondent1DQHomeDetails);
  statementOfMeans.cohabiting = toCUIGenericYesNo(ccdClaim?.respondent1PartnerAndDependent?.liveWithPartnerRequired);
  statementOfMeans.partnerAge = toCUIGenericYesNo(ccdClaim?.respondent1PartnerAndDependent?.partnerAgedOver);
  statementOfMeans.partnerPension = toCUIGenericYesNo(ccdClaim?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.partnerPensionLiP);
  statementOfMeans.partnerDisability = toCUIGenericYesNo(ccdClaim?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.partnerDisabilityLiP);
  statementOfMeans.partnerSevereDisability = toCUIGenericYesNo(ccdClaim?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.partnerSevereDisabilityLiP);
  statementOfMeans.dependants = toCUIDependents(ccdClaim?.respondent1PartnerAndDependent);
  statementOfMeans.childrenDisability = toCUIGenericYesNo(ccdClaim?.respondent1PartnerAndDependent?.receiveDisabilityPayments);
  statementOfMeans.numberOfChildrenLivingWithYou = Number(ccdClaim?.respondent1LiPResponse?.respondent1LiPFinancialDetails?.childrenEducationLiP);
  statementOfMeans.otherDependants = toCUIOtherDependents(ccdClaim?.respondent1PartnerAndDependent);
  statementOfMeans.employment = toCUIEmployment(ccdClaim?.defenceAdmitPartEmploymentTypeRequired, ccdClaim?.respondToClaimAdmitPartEmploymentTypeLRspec);
  statementOfMeans.employers = toCUIEmploymentDetails(ccdClaim?.responseClaimAdmitPartEmployer);
  statementOfMeans.selfEmployedAs = toCUISelfEmploymentDetails(ccdClaim?.specDefendant1SelfEmploymentDetails);
  statementOfMeans.taxPayments = toCUISelfEmploymentTaxPayment(ccdClaim?.specDefendant1SelfEmploymentDetails);
  statementOfMeans.unemployment = toCUIUnemploymentDetails(ccdClaim?.respondToClaimAdmitPartUnemployedLRspec);
  statementOfMeans.courtOrders = toCUICourtOrders(ccdClaim?.respondent1CourtOrderPaymentOption, ccdClaim?.respondent1CourtOrderDetails);
  statementOfMeans.debts = toCUIDebts(ccdClaim?.respondent1LoanCreditOption, ccdClaim?.respondent1LoanCreditDetails);
  statementOfMeans.explanation = new Explanation(ccdClaim?.responseToClaimAdmitPartWhyNotPayLRspec);
  statementOfMeans.carer = toCUICarerAllowanceCredit(ccdClaim?.respondent1DQCarerAllowanceCredit, ccdClaim?.respondent1DQCarerAllowanceCreditFullAdmission);
  statementOfMeans.priorityDebts = toCUIPriorityDebts(ccdClaim?.specDefendant1Debts);
  statementOfMeans.regularIncome = toCUIRecurringIncome(ccdClaim?.respondent1DQRecurringIncome, ccdClaim?.respondent1DQRecurringIncomeFA);
  statementOfMeans.regularExpenses = toCUIRecurringExpense(ccdClaim?.respondent1DQRecurringExpenses, ccdClaim?.respondent1DQRecurringExpensesFA);
  return statementOfMeans;
};

