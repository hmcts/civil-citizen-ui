import config from 'config';
import nock from 'nock';
import request from 'supertest';
import {app} from '../../../../../main/app';
import {mockCivilClaim, mockRedisFailure} from '../../../../utils/mockDraftStore';
import {SUPPORT_REQUIRED_URL, VULNERABILITY_URL} from '../../../../../main/routes/urls';
import {REDIS_FAILURE} from '../../../../../main/common/form/validationErrors/errorMessageConstants';
import express from 'express';

jest.mock('../../../../../main/modules/oidc');
jest.mock('../../../../../main/modules/draft-store');

describe('Vulnerability Controller', () => {
  const citizenRoleToken: string = config.get('citizenRoleToken');
  const idamUrl: string = config.get('idamUrl');
  beforeEach(() => {
    nock(idamUrl)
      .post('/o/token')
      .reply(200, {id_token: citizenRoleToken});
  });

  describe('on GET', () => {
    it('should return vulnerability page', async () => {
      app.locals.draftStoreClient = mockCivilClaim;
      await request(app).get(VULNERABILITY_URL).expect((res) => {
        expect(res.status).toBe(200);
        expect(res.text).toContain('Vulnerability Questions');
      });
    });

    it('should return status 500 when error thrown', async () => {
      app.locals.draftStoreClient = mockRedisFailure;
      await request(app)
        .get(VULNERABILITY_URL)
        .expect((res: Response) => {
          expect(res.status).toBe(500);
          expect(res.body).toMatchObject({error: REDIS_FAILURE});
        });
    });
  });

  describe('on POST', () => {
    beforeEach(() => {
      app.locals.draftStoreClient = mockCivilClaim;
    });

    it('should return vulnerability page', async () => {
      await request(app).post(VULNERABILITY_URL).expect((res) => {
        expect(res.status).toBe(200);
        expect(res.text).toContain('Vulnerability Questions');
      });
    });

    it('should return vulnerability page if option yes is selected', async () => {
      await request(app).post(VULNERABILITY_URL).send({isVulnerable: 'yes'}).expect((res) => {
        expect(res.status).toBe(200);
        expect(res.text).toContain('Vulnerability Questions');
      });
    });

    it('should return vulnerability page if only vulnerability details are provided', async () => {
      await request(app).post(VULNERABILITY_URL).send({vulnerabilityDetails: 'my details'}).expect((res) => {
        expect(res.status).toBe(200);
        expect(res.text).toContain('Vulnerability Questions');
      });
    });

    it('should return status 500 when error thrown', async () => {
      app.locals.draftStoreClient = mockRedisFailure;
      await request(app)
        .post(VULNERABILITY_URL)
        .send({isVulnerable: 'no'})
        .expect((res: Response) => {
          expect(res.status).toBe(500);
          expect(res.body).toMatchObject({error: REDIS_FAILURE});
        });
    });

    it('should redirect to the support required page if option no is selected', async () => {
      await request(app).post(VULNERABILITY_URL).send({isVulnerable: 'no'})
        .expect((res: express.Response) => {
          expect(res.status).toBe(302);
          expect(res.get('location')).toBe(SUPPORT_REQUIRED_URL);
        });
    });

    it('should redirect to the support required page if option yes is selected details are provided', async () => {
      await request(app).post(VULNERABILITY_URL).send({isVulnerable: 'yes', vulnerabilityDetails: 'details'})
        .expect((res: express.Response) => {
          expect(res.status).toBe(302);
          expect(res.get('location')).toBe(SUPPORT_REQUIRED_URL);
        });
    });
  });
});
