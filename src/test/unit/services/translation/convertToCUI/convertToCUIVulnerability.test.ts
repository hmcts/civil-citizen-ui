import {toCUIVulnerability} from "services/translation/convertToCUI/convertToCUIVulnerability";
import {CCDVulnerability} from "models/ccdResponse/ccdVulnerability";
import {YesNo, YesNoUpperCamelCase} from "form/models/yesNo";
import {VulnerabilityQuestions} from "models/directionsQuestionnaire/vulnerabilityQuestions/vulnerabilityQuestions";

describe('translate CCDVulnerability to CUI Vulnerability model', () => {
  it('should return undefined if CCDVulnerability doesnt exist', () => {
    //Given
    const input: CCDVulnerability = undefined;
    //When
    const output = toCUIVulnerability(input);
    //Then
    expect(output).toBe(undefined);
  });

  it('should return undefined if CCDVulnerability data doesnt exist', () => {
    //Given
    const input: CCDVulnerability = {
      vulnerabilityAdjustmentsRequired: undefined,
      vulnerabilityAdjustments: undefined,
    };
    //When
    const output = toCUIVulnerability(input);
    const expected : VulnerabilityQuestions = {
      vulnerability: {
        option: undefined,
        vulnerabilityDetails: undefined,
      }
    }
    //Then
    expect(output).toEqual(expected);
  });

  it('should return data if CCDVulnerability data exist', () => {
    //Given
    const input: CCDVulnerability = {
      vulnerabilityAdjustmentsRequired: YesNoUpperCamelCase.YES,
      vulnerabilityAdjustments: 'test',
    };
    //When
    const output = toCUIVulnerability(input);
    const expected : VulnerabilityQuestions = {
      vulnerability: {
        option: YesNo.YES,
        vulnerabilityDetails: 'test',
      }
    }
    //Then
    expect(output).toEqual(expected);
  });
})
