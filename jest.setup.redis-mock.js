const ldClientMock = {
  track: jest.fn(),
  identify: jest.fn(),
  allFlags: jest.fn(),
  close: jest.fn(),
  flush: jest.fn(),
  getContext: jest.fn(),
  off: jest.fn(),
  on: jest.fn(),
  setStreaming: jest.fn(),
  variation: jest.fn(),
  variationDetail: jest.fn(),
  waitForInitialization: jest.fn(),
  waitUntilGoalsReady: jest.fn(),
  waitUntilReady: jest.fn(),
};
jest.mock('ioredis', () => jest.requireActual('ioredis-mock'));
// jest.mock('./src/main/services/features/generalApplication/generalApplicationService', () => ({
//   saveApplicationType: jest.fn(),
//   saveInformOtherParties: jest.fn(),
//   saveRespondentAgreement: jest.fn(),
//   saveAcceptDefendantOffer: jest.fn(),
//   saveOrderJudge: jest.fn(),
//   saveHearingSupport: jest.fn(),
//   saveAgreementFromOtherParty: jest.fn(),
//   saveApplicationCosts: jest.fn(),
//   saveIfPartyWantsToUploadDoc: jest.fn(),
//   getCancelUrl: jest.fn(),
//   saveUnavailableDates: jest.fn(),
//   saveRequestingReason: jest.fn(),
//   saveN245Form: jest.fn(),
//   saveHearingArrangement: jest.fn(),
//   saveHearingContactDetails: jest.fn(),
//   saveStatementOfTruth: jest.fn(),
//   getDynamicHeaderForMultipleApplications: jest.fn(),
//   getByIndexOrLast: jest.fn(),
//   getByIndex: jest.fn(),
//   getLast: jest.fn(),
//   updateByIndexOrAppend: jest.fn(),
//   validateAdditionalApplicationtType: jest.fn(),
//   getListOfNotAllowedAdditionalAppType: jest.fn(),
//   additionalApplicationErrorMessages: jest.fn(),
//   saveHelpWithFeesDetails: jest.fn(),
//   saveAndTriggerNotifyGaHwfEvent: jest.fn(),
//   getApplicationStatus: jest.fn(),
//   getRespondentApplicationStatus: jest.fn(),
//   getApplicationFromGAService: jest.fn(),
//   saveRespondentWantToUploadDoc: jest.fn(),
//   getClaimDetailsById: jest.fn(),
//   shouldDisplaySyncWarning: jest.fn(),
//   getApplicationIndex: jest.fn(),
//   deleteGAFromClaimsByUserId: jest.fn(),
//   validateNoConsentOption: jest.fn(),
// }));
jest.mock('launchdarkly-node-server-sdk', () => ({
  init: jest.fn().mockReturnValue(ldClientMock),
}));