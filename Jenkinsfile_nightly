#!groovy
properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    pipelineTriggers([cron('H 8 * * 1-5')]),
    parameters([
        string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
        string(name: 'TEST_URL', defaultValue: 'https://civil-citizen-ui.aat.platform.hmcts.net', description: 'The URL you want to run tests against'),
        string(name: 'EXUI_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net',
          description: 'The URL you want to run the full functional tests against'),
        string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net',
          description: 'The URL of idam api'),
        string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal',
          description: 'The URL of dm store'),
        string(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal',
          description: 'The URL of service auth provider'),
        string(name: 'CCD_DATA_STORE_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal',
          description: 'The URL of ccd data store'),
        string(name: 'CIVIL_SERVICE_URL', defaultValue: 'http://civil-service-aat.service.core-compute-aat.internal',
          description: 'The URL of civil service'),
    ])
])

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.GithubAPI

def type = "nodejs"
def product = "civil"
def component = "citizen-ui"
def camundaBranch = "master"
def dmnBranch = "master"
def waStandaloneBranch = "master"
def ccdBranch = "master"
AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD'),
    secret('ordnance-survey-api-key', 'ORDNANCE_SURVEY_API_KEY'),
    secret('citizen-ui-test-username', 'CITIZEN_USERNAME'),
    secret('citizen-ui-test-password', 'CITIZEN_PASSWORD'),
    secret('civil-judge-password', 'JUDGE_PASSWORD')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('citizen-ui-test-username', 'CITIZEN_USERNAME'),
    secret('citizen-ui-test-password', 'CITIZEN_PASSWORD'),
    secret('civil-judge-password', 'JUDGE_PASSWORD'),
    secret('system-update-user-password', 'SYSTEM_USER_PASSWORD')
  ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component) {
  env.TEST_URL = params.TEST_URL
  env.URL = params.EXUI_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
  env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
  env.CIVIL_SERVICE_URL = params.CIVIL_SERVICE_URL
  env.TESTS_FOR_ACCESSIBILITY = false
  overrideVaultEnvironments([
    'aat': params.ENVIRONMENT
  ])
  loadVaultSecrets(secrets)

  enableFullFunctionalTest(200)

  afterAlways('fullFunctionalTest') {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'src/test/functionalTests/test-results/functional/**/*'
  }
}
