#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    pipelineTriggers([cron('H 12 * * 1-5')]),
    copyArtifactPermission('/HMCTS_a_to_c_Nightly/civil-citizen-ui/*'),
    parameters([
      string(name: 'FORCE_GREEN_BUILD', defaultValue: 'false', description: 'Should force pipeline to go green by not running any functional tests'),
      string(name: 'RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES', defaultValue: 'false', description: 'Runs the failed test files and not executed test files from the first previous pipeline run that contains the following files \'failedTestFiles.json\' and \'notExecutedTestFiles.json\''),
      string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
      string(name: 'TEST_URL', defaultValue: 'https://civil-citizen-ui.aat.platform.hmcts.net', description: 'The URL you want to run tests against'),
      string(name: 'EXUI_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net',
        description: 'The URL you want to run the full functional tests against'),
      string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net',
        description: 'The URL of idam api'),
      string(name: 'IDAM_WEB_URL', defaultValue: 'https://idam-web-public.aat.platform.hmcts.net',
        description: 'The URL of idam web'),
      string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal',
        description: 'The URL of dm store'),
      string(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal',
        description: 'The URL of service auth provider'),
      string(name: 'CCD_DATA_STORE_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal',
        description: 'The URL of ccd data store'),
      string(name: 'CIVIL_SERVICE_URL', defaultValue: 'http://civil-service-aat.service.core-compute-aat.internal',
        description: 'The URL of civil service'),
      string(name: 'CIVIL_GENERAL_APPLICATIONS_URL', defaultValue: 'http://civil-general-applications-aat.service.core-compute-aat.internal',
        description: 'The URL of general applications'),
      string(name: 'AAC_API_URL', defaultValue: 'http://aac-manage-case-assignment-aat.service.core-compute-aat.internal',
        description: 'The URL of AAC service'),
    ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "civil"
def component = "citizen-ui"

// SAUCELABS config - configured on Jenkins
env.SAUCE_USERNAME = 'username'
env.SAUCE_ACCESS_KEY = 'privatekey'
env.SAUCE_TUNNEL_IDENTIFIER = 'reformtunnel'

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def copyPrevFailedAndNotExecutedTestFilesJson() {
  def buildFound = false
  def buildNumber = currentBuild.previousBuild.number
  def minBuildNumber = ((buildNumber - 8) > 0) ? buildNumber - 8 : 0
  while (!buildFound && buildNumber > minBuildNumber) {
    try {
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "test-results/functional/testFilesReport.json"
      sh "mv 'test-results/functional/testFilesReport.json' 'test-results/functional/prevTestFilesReport.json'"
      buildFound = true
    } catch (Exception error) {
      echo "artifact not found: " + error.toString()
      buildNumber--
    }
  }
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-xui-webapp', 'XUI_S2S_SECRET'),
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('citizen-ui-test-username', 'CITIZEN_USERNAME'),
    secret('citizen-ui-test-password', 'CITIZEN_PASSWORD'),
    secret('civil-judge-password', 'JUDGE_PASSWORD'),
    secret('system-update-user-password', 'SYSTEM_USER_PASSWORD')
  ],
  'civil-cui-${env}': [
    secret('playwright-service-url', 'PLAYWRIGHT_SERVICE_URL'),
    secret('playwright-token', 'PLAYWRIGHT_SERVICE_ACCESS_TOKEN'),
  ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component) {
  env.FORCE_GREEN_BUILD=params.FORCE_GREEN_BUILD
  env.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES=params.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES
  env.TEST_URL = params.TEST_URL
  env.URL = params.EXUI_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.IDAM_WEB_URL=params.IDAM_WEB_URL
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
  env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
  env.CIVIL_SERVICE_URL = params.CIVIL_SERVICE_URL
  env.CIVIL_GENERAL_APPLICATIONS_URL = params.CIVIL_GENERAL_APPLICATIONS_URL
  env.TESTS_FOR_ACCESSIBILITY = false
  overrideVaultEnvironments([
    'aat': params.ENVIRONMENT
  ])
  loadVaultSecrets(secrets)

  boolean forceGreenBuild = env.FORCE_GREEN_BUILD.toBoolean();
  boolean runPrevFailedAndNotExecutedTestFiles = env.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES.toBoolean();

  enableCrossBrowserTest()

  if(!forceGreenBuild) {
    before('fullFunctionalTest') {
      if(runPrevFailedAndNotExecutedTestFiles) {
        copyPrevFailedAndNotExecutedTestFilesJson()
      }
    }
  }

  enableFullFunctionalTest(200)

  if(!forceGreenBuild) {
    afterAlways('fullFunctionalTest') {
      archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    }

    afterAlways('crossBrowserTest') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
      env.IS_CROSSBROWSER = false
    }
  }
}
